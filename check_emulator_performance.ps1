# Script de v√©rification des performances √©mulateur TripBook
# V√©rifie l'√©tat d'optimisation et fournit des recommandations

Write-Host "üîç V√©rification des Performances √âmulateur TripBook" -ForegroundColor Green
Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor Green

$avdPath = "C:\Users\HP\.android\avd"

# Fonction d'√©valuation de performance
function Evaluate-EmulatorPerformance {
    param([string]$configPath, [string]$name)
    
    if (-not (Test-Path $configPath)) {
        return $null
    }
    
    $config = Get-Content $configPath
    $score = 0
    $recommendations = @()
    $status = @()
    
    # V√©rification RAM
    $ram = [int]($config | Where-Object { $_ -match "hw.ramSize" } | ForEach-Object { $_.Split('=')[1].Trim() })
    if ($ram -ge 4096) {
        $status += "‚úÖ RAM: $ram MB (Excellent)"
        $score += 5
    } elseif ($ram -ge 3072) {
        $status += "‚ö†Ô∏è  RAM: $ram MB (Bon)"
        $score += 3
    } else {
        $status += "‚ùå RAM: $ram MB (Insuffisant)"
        $recommendations += "Augmenter la RAM √† 4096 MB minimum"
        $score += 1
    }
    
    # V√©rification CPU
    $cpu = [int]($config | Where-Object { $_ -match "hw.cpu.ncore" } | ForEach-Object { $_.Split('=')[1].Trim() })
    if ($cpu -ge 4) {
        $status += "‚úÖ CPU: $cpu cores (Optimal)"
        $score += 5
    } elseif ($cpu -ge 2) {
        $status += "‚ö†Ô∏è  CPU: $cpu cores (Correct)"
        $score += 3
    } else {
        $status += "‚ùå CPU: $cpu cores (Insuffisant)"
        $recommendations += "Configurer 4 cores minimum"
        $score += 1
    }
    
    # V√©rification GPU
    $gpu = ($config | Where-Object { $_ -match "hw.gpu.mode" } | ForEach-Object { $_.Split('=')[1].Trim() })
    if ($gpu -eq "host") {
        $status += "‚úÖ GPU: $gpu (Acc√©l√©ration optimale)"
        $score += 5
    } elseif ($gpu -eq "auto") {
        $status += "‚ö†Ô∏è  GPU: $gpu (Acceptable)"
        $score += 3
        $recommendations += "Forcer l'acc√©l√©ration GPU host"
    } else {
        $status += "‚ùå GPU: $gpu (Non optimis√©)"
        $recommendations += "Activer l'acc√©l√©ration GPU host"
        $score += 1
    }
    
    # V√©rification FastBoot
    $fastboot = ($config | Where-Object { $_ -match "fastboot.forceFastBoot" } | ForEach-Object { $_.Split('=')[1].Trim() })
    if ($fastboot -eq "yes") {
        $status += "‚úÖ FastBoot: Activ√©"
        $score += 3
    } else {
        $status += "‚ùå FastBoot: D√©sactiv√©"
        $recommendations += "Activer FastBoot pour d√©marrage rapide"
    }
    
    # V√©rification optimisations TripBook
    $tripbookOptimizations = $config | Where-Object { $_ -match "# Optimisations TripBook" }
    if ($tripbookOptimizations) {
        $status += "‚úÖ Optimisations TripBook: Appliqu√©es"
        $score += 2
    } else {
        $status += "‚ö†Ô∏è  Optimisations TripBook: Non appliqu√©es"
        $recommendations += "Appliquer les optimisations sp√©cifiques TripBook"
    }
    
    # Calcul du niveau de performance
    $level = switch ($score) {
        { $_ -ge 18 } { "üèÜ Excellent" }
        { $_ -ge 14 } { "üü¢ Bon" }
        { $_ -ge 10 } { "üü° Moyen" }
        default { "üî¥ Insuffisant" }
    }
    
    return @{
        Name = $name
        Score = $score
        Level = $level
        Status = $status
        Recommendations = $recommendations
    }
}

# Analyse de tous les √©mulateurs
Write-Host "üìä Analyse des √©mulateurs...\n" -ForegroundColor Cyan

$emulators = Get-ChildItem -Path $avdPath -Filter "*.ini" | ForEach-Object {
    $name = $_.BaseName
    $configPath = Join-Path $avdPath "$name.avd\config.ini"
    Evaluate-EmulatorPerformance -configPath $configPath -name $name
} | Where-Object { $_ -ne $null } | Sort-Object Score -Descending

# Affichage des r√©sultats
foreach ($emulator in $emulators) {
    Write-Host "üì± $($emulator.Name)" -ForegroundColor Yellow
    Write-Host "   Niveau: $($emulator.Level) ($($emulator.Score)/20 points)" -ForegroundColor White
    
    Write-Host "   Configuration:" -ForegroundColor Gray
    foreach ($stat in $emulator.Status) {
        Write-Host "     $stat" -ForegroundColor White
    }
    
    if ($emulator.Recommendations.Count -gt 0) {
        Write-Host "   Recommandations:" -ForegroundColor Yellow
        foreach ($rec in $emulator.Recommendations) {
            Write-Host "     ‚Ä¢ $rec" -ForegroundColor Cyan
        }
    }
    
    Write-Host ""
}

# Recommandations g√©n√©rales
$bestEmulator = $emulators | Select-Object -First 1
if ($bestEmulator) {
    Write-Host "üèÜ Meilleur √©mulateur: $($bestEmulator.Name)" -ForegroundColor Green
    Write-Host "   Score: $($bestEmulator.Score)/20 - $($bestEmulator.Level)" -ForegroundColor Green
    
    if ($bestEmulator.Score -ge 15) {
        Write-Host "\nüöÄ Commande optimis√©e pour lancer TripBook:" -ForegroundColor Green
        Write-Host "   emulator -avd $($bestEmulator.Name) -gpu host -memory 4096 -cores 4" -ForegroundColor Cyan
    } else {
        Write-Host "\n‚ö†Ô∏è  Optimisations recommand√©es avant utilisation:" -ForegroundColor Yellow
        Write-Host "   Lancez: .\optimize_emulator_advanced.ps1" -ForegroundColor Cyan
    }
}

# V√©rification syst√®me rapide
Write-Host "\nüîç Diagnostic syst√®me rapide:" -ForegroundColor Cyan

# RAM syst√®me
$systemRAM = [math]::Round((Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property capacity -Sum).sum / 1gb, 1)
if ($systemRAM -ge 16) {
    Write-Host "‚úÖ RAM syst√®me: $systemRAM GB (Excellent)" -ForegroundColor Green
} elseif ($systemRAM -ge 8) {
    Write-Host "‚ö†Ô∏è  RAM syst√®me: $systemRAM GB (Suffisant)" -ForegroundColor Yellow
} else {
    Write-Host "‚ùå RAM syst√®me: $systemRAM GB (Insuffisant)" -ForegroundColor Red
}

# Processeur
$cpu = Get-CimInstance Win32_Processor
if ($cpu.NumberOfCores -ge 4) {
    Write-Host "‚úÖ Processeur: $($cpu.NumberOfCores) cores (Bon)" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è  Processeur: $($cpu.NumberOfCores) cores (Limit√©)" -ForegroundColor Yellow
}

# Espace disque
$disk = Get-CimInstance Win32_LogicalDisk | Where-Object DeviceID -eq "C:"
$freeSpaceGB = [math]::Round($disk.FreeSpace / 1GB, 1)
if ($freeSpaceGB -ge 20) {
    Write-Host "‚úÖ Espace libre: $freeSpaceGB GB (Suffisant)" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è  Espace libre: $freeSpaceGB GB (Attention)" -ForegroundColor Yellow
}

Write-Host "\n‚ú® V√©rification termin√©e!" -ForegroundColor Green
Write-Host "üí° Pour optimiser: .\optimize_emulator_advanced.ps1" -ForegroundColor Cyan

