package com.android.tripbook.reservation.notifications.models

/**
 * Enum d√©finissant les diff√©rents types de notifications dans l'application TripBook
 */
enum class NotificationType(val displayName: String, val icon: String) {

    // Notifications de r√©servation
    BOOKING_CONFIRMATION("Confirmation de r√©servation", "‚úÖ"),
    BOOKING_PENDING("R√©servation en attente", "‚è≥"),
    BOOKING_CANCELLED("R√©servation annul√©e", "‚ùå"),
    BOOKING_MODIFIED("R√©servation modifi√©e", "üìù"),
    BOOKING_REMINDER("Rappel de r√©servation", "üîî"),

    // Notifications de transport
    FLIGHT_CONFIRMATION("Vol confirm√©", "‚úàÔ∏è"),
    FLIGHT_DELAY("Retard de vol", "‚è∞"),
    FLIGHT_CANCELLATION("Vol annul√©", "üö´"),
    FLIGHT_GATE_CHANGE("Changement de porte", "üö™"),
    FLIGHT_BOARDING("Embarquement", "üé´"),
    CHECK_IN_AVAILABLE("Enregistrement disponible", "üì±"),
    CHECK_IN_REMINDER("Rappel d'enregistrement", "‚è±Ô∏è"),
    BOARDING_PASS_READY("Carte d'embarquement pr√™te", "üéüÔ∏è"),

    // Notifications transport terrestre/maritime
    CAR_RENTAL_CONFIRMATION("Location de voiture confirm√©e", "üöó"),
    CAR_PICKUP_REMINDER("Rappel de r√©cup√©ration v√©hicule", "üîë"),
    SHIP_DEPARTURE_REMINDER("Rappel de d√©part bateau", "‚õµ"),
    TRANSPORT_DELAY("Retard de transport", "‚è±Ô∏è"),

    // Notifications d'h√¥tel
    HOTEL_CONFIRMATION("H√¥tel confirm√©", "üè®"),
    HOTEL_CHECK_IN_AVAILABLE("Enregistrement h√¥tel disponible", "üõèÔ∏è"),
    HOTEL_CHECK_OUT_REMINDER("Rappel de checkout", "üß≥"),
    HOTEL_ROOM_READY("Chambre pr√™te", "üõéÔ∏è"),
    HOTEL_BOOKING_MODIFIED("R√©servation h√¥tel modifi√©e", "üè®"),

    // Notifications d'activit√©s
    ACTIVITY_CONFIRMATION("Activit√© confirm√©e", "üéØ"),
    ACTIVITY_REMINDER("Rappel d'activit√©", "üìÖ"),
    ACTIVITY_CANCELLED("Activit√© annul√©e", "‚ö†Ô∏è"),
    ACTIVITY_RESCHEDULED("Activit√© reprogramm√©e", "üîÑ"),
    TOUR_STARTING_SOON("Tour commence bient√¥t", "üö∂"),

    // Notifications de paiement
    PAYMENT_SUCCESS("Paiement r√©ussi", "üí≥"),
    PAYMENT_FAILED("Paiement √©chou√©", "‚ùå"),
    PAYMENT_PENDING("Paiement en attente", "‚è≥"),
    REFUND_PROCESSED("Remboursement trait√©", "üí∞"),

    // Notifications syst√®me
    SYSTEM_MAINTENANCE("Maintenance syst√®me", "üîß"),
    SYSTEM_UPDATE("Mise √† jour disponible", "üîÑ"),

    // Notifications m√©t√©o et voyage
    WEATHER_ALERT("Alerte m√©t√©o", "üå¶Ô∏è"),
    TRAVEL_TIPS("Conseils de voyage", "üí°"),
    DESTINATION_INFO("Informations destination", "‚ÑπÔ∏è"),

    // Notifications d'urgence
    EMERGENCY_CONTACT("Contact d'urgence", "üö®"),
    TRAVEL_ADVISORY("Avis de voyage", "‚ö†Ô∏è"),
    SECURITY_ALERT("Alerte s√©curit√©", "üîí"),

    // Notifications promotionnelles
    SPECIAL_OFFER("Offre sp√©ciale", "üéÅ"),
    LOYALTY_POINTS("Points de fid√©lit√©", "‚≠ê"),

    // Notifications g√©n√©riques
    GENERAL_INFO("Information g√©n√©rale", "‚ÑπÔ∏è"),
    CUSTOM("Personnalis√©", "üì¢");

    companion object {
        /**
         * Obtient le type de notification √† partir de son nom
         */
        fun fromString(type: String): NotificationType {
            return entries.find { it.name.equals(type, ignoreCase = true) } ?: GENERAL_INFO
        }

        /**
         * Obtient tous les types de notifications critiques
         */
        fun getCriticalTypes(): List<NotificationType> {
            return listOf(
                FLIGHT_CANCELLATION,
                FLIGHT_BOARDING,
                EMERGENCY_CONTACT,
                SECURITY_ALERT,
                TRAVEL_ADVISORY,
                PAYMENT_FAILED
            )
        }

        /**
         * Obtient tous les types de notifications li√©es aux vols
         */
        fun getFlightTypes(): List<NotificationType> {
            return listOf(
                FLIGHT_CONFIRMATION,
                FLIGHT_DELAY,
                FLIGHT_CANCELLATION,
                FLIGHT_GATE_CHANGE,
                FLIGHT_BOARDING,
                CHECK_IN_AVAILABLE,
                CHECK_IN_REMINDER,
                BOARDING_PASS_READY
            )
        }
    }
}