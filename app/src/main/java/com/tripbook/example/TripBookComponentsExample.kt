package com.tripbook.example

import android.content.Context
import android.net.Uri
import androidx.lifecycle.lifecycleScope
import com.tripbook.data.api.ImageUploadApiService
import com.tripbook.data.api.PostApiService
import com.tripbook.data.model.Post
import com.tripbook.data.repository.PostRepositoryImpl
import com.tripbook.di.NetworkModule
import com.tripbook.domain.usecase.PostUseCase
import com.tripbook.domain.validator.PostValidator
import com.tripbook.presentation.viewmodel.PostViewModel
import com.tripbook.utils.ImageUploader
import kotlinx.coroutines.launch
import java.util.*

/**
 * Example usage class demonstrating how to use the improved PostRepository,
 * ImageUploader, and PostValidator components.
 *
 * This class shows the complete flow from dependency injection to UI operations.
 */
class TripBookComponentsExample(private val context: Context) {

    // 1. Setup dependencies using NetworkModule
    private val okHttpClient = NetworkModule.provideOkHttpClient()
    private val retrofit = NetworkModule.provideRetrofit(okHttpClient)
    private val postApiService = NetworkModule.providePostApiService(retrofit)
    private val imageUploadApiService = NetworkModule.provideImageUploadApiService(retrofit)

    // 2. Initialize components
    private val postRepository = PostRepositoryImpl(postApiService)
    private val postValidator = PostValidator()
    private val imageUploader = ImageUploader(context, imageUploadApiService)

    // 3. Setup use case and ViewModel
    private val postUseCase = PostUseCase(postRepository, postValidator, imageUploader)
    private val postViewModel = PostViewModel(postUseCase)

    /**
     * Example 1: Creating a new post with image upload
     */
    fun createPostExample() {
        // Create a sample post
        val newPost = Post(
            id = "", // Will be generated by backend
            userId = "user123",
            title = "My Amazing Trip to Paris",
            content = "Just had the most incredible experience visiting the Eiffel Tower! The view from the top was absolutely breathtaking.",
            location = "Paris, France",
            images = emptyList(), // Will be populated after upload
            timestamp = Date(),
            likes = 0,
            comments = emptyList(),
            tags = listOf("travel", "paris", "eiffeltower", "vacation")
        )

        // Sample image URIs (these would come from camera or gallery)
        val imageUris = listOf<Uri>() // Add actual URIs here

        // Validate the post first
        val validationResult = postValidator.validate(newPost)
        if (validationResult.isValid) {
            // Create the post using ViewModel
            postViewModel.createPost(newPost, imageUris)

            // Observe the result
            observePostCreation()
        } else {
            println("Validation failed: ${validationResult.errors}")
            println("Warnings: ${validationResult.warnings}")
            println("Validation score: ${validationResult.score}")
        }
    }

    /**
     * Example 2: Loading and displaying posts
     */
    fun loadPostsExample() {
        // Load posts using ViewModel
        postViewModel.loadPosts()

        // Observe posts state
        observePostsState()
    }

    /**
     * Example 3: Searching for posts
     */
    fun searchPostsExample() {
        val searchQuery = "Paris"
        postViewModel.searchPosts(searchQuery)

        // Observe search results
        observeSearchResults()
    }

    /**
     * Example 4: Individual image upload with progress tracking
     */
    fun uploadImageExample(imageUri: Uri) {
        lifecycleScope.launch {
            imageUploader.uploadImage(imageUri, "Beautiful sunset in Paris")
                .collect { result ->
                    when (result) {
                        is ImageUploader.UploadResult.Loading -> {
                            println("Starting upload...")
                        }
                        is ImageUploader.UploadResult.Progress -> {
                            println("Upload progress: ${result.percentage}% - ${result.message}")
                        }
                        is ImageUploader.UploadResult.Success -> {
                            println("Upload successful!")
                            println("Image URL: ${result.imageUrl}")
                            println("Image ID: ${result.imageId}")
                        }
                        is ImageUploader.UploadResult.Error -> {
                            println("Upload failed: ${result.message}")
                            result.exception?.printStackTrace()
                        }
                    }
                }
        }
    }

    /**
     * Example 5: Real-time validation during form input
     */
    fun realTimeValidationExample() {
        // Validate individual fields as user types
        val titleValid = postValidator.validateField("title", "My Trip")
        val contentValid = postValidator.validateField("content", "This is my trip content...")
        val locationValid = postValidator.validateField("location", "Paris")

        println("Title valid: $titleValid")
        println("Content valid: $contentValid")
        println("Location valid: $locationValid")

        // Get detailed validation for a complete post
        val testPost = Post(
            userId = "user123",
            title = "Short", // This will trigger validation warnings
            content = "Very short content", // This will trigger warnings
            location = "Paris, France",
            images = listOf("https://example.com/image1.jpg"),
            tags = listOf("travel", "paris")
        )

        val detailedValidation = postValidator.validate(testPost)
        println("Detailed validation:")
        println("  Valid: ${detailedValidation.isValid}")
        println("  Errors: ${detailedValidation.errors}")
        println("  Warnings: ${detailedValidation.warnings}")
        println("  Score: ${detailedValidation.score}")
    }

    /**
     * Example 6: Post interaction (like/unlike)
     */
    fun postInteractionExample() {
        val postId = "post123"

        // Like a post
        postViewModel.likePost(postId)

        // Unlike a post
        postViewModel.unlikePost(postId)
    }

    /**
     * Example 7: Image validation before upload
     */
    fun imageValidationExample(imageUri: Uri) {
        lifecycleScope.launch {
            // Convert URI to file for validation
            val imageFile = imageUploader.createTempImageFile()

            // Validate the image file
            val validationResult = imageUploader.validateImageFile(imageFile)

            if (validationResult.isValid) {
                println("Image is valid, proceeding with upload...")
                uploadImageExample(imageUri)
            } else {
                println("Image validation failed: ${validationResult.errorMessage}")
            }
        }
    }

    /**
     * Example 8: Comprehensive post management
     */
    fun postManagementExample() {
        val userId = "user123"

        // Load posts by specific user
        postViewModel.loadUserPosts(userId)

        // Update an existing post
        val updatedPost = Post(
            id = "post123",
            userId = userId,
            title = "Updated: My Amazing Trip to Paris",
            content = "Updated content with more details about my incredible experience...",
            location = "Paris, France",
            images = listOf("https://example.com/image1.jpg", "https://example.com/image2.jpg"),
            tags = listOf("travel", "paris", "updated", "eiffeltower")
        )

        postViewModel.updatePost(updatedPost)

        // Delete a post
        postViewModel.deletePost("post456", listOf("image1", "image2"))
    }

    // Observer methods for ViewModel states
    private fun observePostCreation() {
        lifecycleScope.launch {
            postViewModel.postOperationState.collect { result ->
                result?.let {
                    when (it) {
                        is com.tripbook.data.model.NetworkResult.Loading -> {
                            println("Creating post: ${it.message}")
                        }
                        is com.tripbook.data.model.NetworkResult.Success -> {
                            println("Post created successfully!")
                            println("Post ID: ${it.data.id}")
                        }
                        is com.tripbook.data.model.NetworkResult.Error -> {
                            println("Failed to create post: ${it.message}")
                        }
                        is com.tripbook.data.model.NetworkResult.Exception -> {
                            println("Exception occurred: ${it.exception.message}")
                        }
                    }
                }
            }
        }
    }

    private fun observePostsState() {
        lifecycleScope.launch {
            postViewModel.postsState.collect { result ->
                when (result) {
                    is com.tripbook.data.model.NetworkResult.Loading -> {
                        println("Loading posts...")
                    }
                    is com.tripbook.data.model.NetworkResult.Success -> {
                        println("Loaded ${result.data.size} posts")
                        result.data.forEach { post ->
                            println("- ${post.title} by ${post.userId}")
                        }
                    }
                    is com.tripbook.data.model.NetworkResult.Error -> {
                        println("Failed to load posts: ${result.message}")
                    }
                    is com.tripbook.data.model.NetworkResult.Exception -> {
                        println("Exception loading posts: ${result.exception.message}")
                    }
                }
            }
        }
    }

    private fun observeSearchResults() {
        lifecycleScope.launch {
            postViewModel.searchResults.collect { result ->
                result?.let {
                    when (it) {
                        is com.tripbook.data.model.NetworkResult.Success -> {
                            println("Found ${it.data.size} search results")
                        }
                        is com.tripbook.data.model.NetworkResult.Error -> {
                            println("Search failed: ${it.message}")
                        }
                        else -> { /* Handle other states */ }
                    }
                }
            }
        }
    }
}
